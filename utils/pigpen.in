#!@GUILE@ \
-e main
# aside from this initial boilerplate, this is actually -*- scheme -*- code
!#

;;; pigpen -- Pigpen encoder/decoder

(use-modules (ice-9  getopt-long)
             (ice-9  rdelim)
             (pigpen string)
             (pigpen cipher)
             (pigpen encoder))

(define (print-help-and-exit)
  (display "
Usage: pigpen [options] <string>

Options:
  --fill, -f             Fill the pigpen string into specified number of
                         columns.  If no argument is given then use 75 columns
                         as the goal.
  --format, -F           Use the specified format.
  --substable, -s        Print substitution table and exit.
  --help, -h             Print this message and exit.
")
  (exit 0))

(define (main args)

  (define %option-spec
    '((fill      (single-char #\f) (value #t))
      (format    (single-char #\F) (value #t))
      (substable (single-char #\s) (value #f))
      (help      (single-char #\h) (value #f))))

  (let* ((options    (getopt-long args %option-spec))
         (do-fill    (option-ref options 'fill      #f))
         (format     (option-ref options 'format    "ascii"))
         (substable? (option-ref options 'substable #f))
         (help?      (option-ref options 'help      #f))
         (args       (option-ref options '()        #f)))

    (set-port-encoding! (current-output-port) "UTF-8")

    (and help?
         (print-help-and-exit))

    (and substable?
         (begin
           (print-substitution-table)
           (exit 0)))

    (let ((pstr (encode (car args) #:format (string->symbol format))))
      (cond (do-fill
             (display (pigpen-string->string
                       (fill pstr #:columns (string->number do-fill)))))
            (else
             (display (pigpen-string->string pstr))))
      (newline))))

;;; pigpen ends here

